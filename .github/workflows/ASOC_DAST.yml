name: "HCL AppScan DAST with Presence"
on:
  workflow_dispatch
jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
 - name: HCL AppScan DAST Analyzer
  # You may pin to the exact commit or the version.
  # uses: HCL-TECH-SOFTWARE/appscan-dast-action@ea53de346c43f736ec9eb2e4c72b39fee30f9fae
  uses: HCL-TECH-SOFTWARE/appscan-dast-action@v1.0.5
  with:
    # baseURL of ASOC API
    # Commented out baseurl: # default is https://cloud.appscan.com
    # API key for connecting to ASoC.
    asoc_key: ${{secrets.ASOC_KEY}}
    # Secret for connecting to ASoC.
    asoc_secret: ${{secrets.ASOC_SECRET}}
    # The ASoC application id where your scan will appear.
    application_id: ${{vars.ASOC_APPID}}
    # The name of the scan created in ASoC.
    scan_name: MyCIBC_DAST_GH
    # The type of scan - staging or production
    scan_type: staging # optional, default is staging
    # Choose between dast or upload. DAST will require you to specify starting URL and login, while upload will only require you to specify a .scan or .scant file
    dynamic_scan_type: dast # default is dast
    # If dynamic_scan_type is set to "upload", then you will need to provide the .scan or .scant file here
    # Commented out scan_or_scant_file: # optional
    # The starting URL of the DAST scan
    starting_URL: http://appscandemovm/altoromutualvs2019/ # optional, default is https://demo.testfire.net?mode=demo
    # Login Method of the scan, can be none, userpass, or recorded
    login_method: userpass # optional, default is none
    # Optimization level: NoOptimization, Fast, Faster, Fastest
    # Commented out optimization: # optional, default is Fastest
    # Set the type of network, if this is set to private, you must have AppScan Presence created in advance
    network: private
    # Provide the appscan presence ID here
    presence_id: 27db4995-24cd-ee11-9f01-14cb65723612
    # If set to true, this action will deploy a ephemeral (temporary) instance of the AppScan Presence on the runner. Please take note that this will ignore presence_id and network settings, and will force set wait_for_analysis to true
    # Commented out ephemeral_presence: # optional, default is false
    # if login_method is userpass, provide the username here
    login_user: jsmith # optional
    # if login_method is userpass, provide the password here
    login_password: demo1234 # optional
    # Provide a path to the Login Traffic File data. Supported file type: CONFIG: AppScan Activity Recorder file
    # Commented out  login_sequence_file: # optional
    # Send email notification uponn scan completion
    # Commented out email_notification: # optional, default is false
    # set to personal scan
    # Commented out personal_scan: # optional, default is false
    # Set this true to wait for analysis to complete before finishing job.
    # Commented out wait_for_analysis: # default is true
    # maximum duration in minutes before the job will no longer wait and proceeds to complete, default is 360 (6 hours)
    # Commented out wait_for_analysis_timeout_minutes: # optional, default is 360
    # If **fail_for_noncompliance** = true, fail the job if any non-compliant issues are found in the scan
    # Commented out fail_for_noncompliance: # optional, default is false
    # If **fail_by_severity** is set to true, failure_threshold must also be set. This will fail the job if any issues equal to or higher (more severe) than failure_threshold are found in the scan.
    fail_by_severity: true # optional, default is false
    # If **fail_for_noncompliance** is enabled, the severity that indicates a failure. Lesser severities will not be considered a failure. For example, if failure_threshold is set to Medium, Informational and/or Low severity issues will not cause a failure. Medium, High, and/or Critical issues will cause a failure.	
    # Commented out failure_threshold: # optional, default is High
    
